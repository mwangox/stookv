// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.1
// source: stoo.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	KVService_GetService_FullMethodName                      = "/KVService/GetService"
	KVService_GetServiceByNamespaceAndProfile_FullMethodName = "/KVService/GetServiceByNamespaceAndProfile"
	KVService_GetAllService_FullMethodName                   = "/KVService/GetAllService"
	KVService_SetKeyService_FullMethodName                   = "/KVService/SetKeyService"
	KVService_DeleteKeyService_FullMethodName                = "/KVService/DeleteKeyService"
)

// KVServiceClient is the client API for KVService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KVServiceClient interface {
	GetService(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	GetServiceByNamespaceAndProfile(ctx context.Context, in *GetByNamespaceAndProfileRequest, opts ...grpc.CallOption) (*GetByNamespaceAndProfileResponse, error)
	GetAllService(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*GetAllResponse, error)
	SetKeyService(ctx context.Context, in *SetKeyRequest, opts ...grpc.CallOption) (*SetKeyResponse, error)
	DeleteKeyService(ctx context.Context, in *DeleteKeyRequest, opts ...grpc.CallOption) (*DeleteKeyResponse, error)
}

type kVServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKVServiceClient(cc grpc.ClientConnInterface) KVServiceClient {
	return &kVServiceClient{cc}
}

func (c *kVServiceClient) GetService(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, KVService_GetService_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kVServiceClient) GetServiceByNamespaceAndProfile(ctx context.Context, in *GetByNamespaceAndProfileRequest, opts ...grpc.CallOption) (*GetByNamespaceAndProfileResponse, error) {
	out := new(GetByNamespaceAndProfileResponse)
	err := c.cc.Invoke(ctx, KVService_GetServiceByNamespaceAndProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kVServiceClient) GetAllService(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*GetAllResponse, error) {
	out := new(GetAllResponse)
	err := c.cc.Invoke(ctx, KVService_GetAllService_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kVServiceClient) SetKeyService(ctx context.Context, in *SetKeyRequest, opts ...grpc.CallOption) (*SetKeyResponse, error) {
	out := new(SetKeyResponse)
	err := c.cc.Invoke(ctx, KVService_SetKeyService_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kVServiceClient) DeleteKeyService(ctx context.Context, in *DeleteKeyRequest, opts ...grpc.CallOption) (*DeleteKeyResponse, error) {
	out := new(DeleteKeyResponse)
	err := c.cc.Invoke(ctx, KVService_DeleteKeyService_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KVServiceServer is the server API for KVService service.
// All implementations must embed UnimplementedKVServiceServer
// for forward compatibility
type KVServiceServer interface {
	GetService(context.Context, *GetRequest) (*GetResponse, error)
	GetServiceByNamespaceAndProfile(context.Context, *GetByNamespaceAndProfileRequest) (*GetByNamespaceAndProfileResponse, error)
	GetAllService(context.Context, *GetAllRequest) (*GetAllResponse, error)
	SetKeyService(context.Context, *SetKeyRequest) (*SetKeyResponse, error)
	DeleteKeyService(context.Context, *DeleteKeyRequest) (*DeleteKeyResponse, error)
	mustEmbedUnimplementedKVServiceServer()
}

// UnimplementedKVServiceServer must be embedded to have forward compatible implementations.
type UnimplementedKVServiceServer struct {
}

func (UnimplementedKVServiceServer) GetService(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetService not implemented")
}
func (UnimplementedKVServiceServer) GetServiceByNamespaceAndProfile(context.Context, *GetByNamespaceAndProfileRequest) (*GetByNamespaceAndProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceByNamespaceAndProfile not implemented")
}
func (UnimplementedKVServiceServer) GetAllService(context.Context, *GetAllRequest) (*GetAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllService not implemented")
}
func (UnimplementedKVServiceServer) SetKeyService(context.Context, *SetKeyRequest) (*SetKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetKeyService not implemented")
}
func (UnimplementedKVServiceServer) DeleteKeyService(context.Context, *DeleteKeyRequest) (*DeleteKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteKeyService not implemented")
}
func (UnimplementedKVServiceServer) mustEmbedUnimplementedKVServiceServer() {}

// UnsafeKVServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KVServiceServer will
// result in compilation errors.
type UnsafeKVServiceServer interface {
	mustEmbedUnimplementedKVServiceServer()
}

func RegisterKVServiceServer(s grpc.ServiceRegistrar, srv KVServiceServer) {
	s.RegisterService(&KVService_ServiceDesc, srv)
}

func _KVService_GetService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KVServiceServer).GetService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KVService_GetService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KVServiceServer).GetService(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KVService_GetServiceByNamespaceAndProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByNamespaceAndProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KVServiceServer).GetServiceByNamespaceAndProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KVService_GetServiceByNamespaceAndProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KVServiceServer).GetServiceByNamespaceAndProfile(ctx, req.(*GetByNamespaceAndProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KVService_GetAllService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KVServiceServer).GetAllService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KVService_GetAllService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KVServiceServer).GetAllService(ctx, req.(*GetAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KVService_SetKeyService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KVServiceServer).SetKeyService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KVService_SetKeyService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KVServiceServer).SetKeyService(ctx, req.(*SetKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KVService_DeleteKeyService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KVServiceServer).DeleteKeyService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KVService_DeleteKeyService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KVServiceServer).DeleteKeyService(ctx, req.(*DeleteKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KVService_ServiceDesc is the grpc.ServiceDesc for KVService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KVService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "KVService",
	HandlerType: (*KVServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetService",
			Handler:    _KVService_GetService_Handler,
		},
		{
			MethodName: "GetServiceByNamespaceAndProfile",
			Handler:    _KVService_GetServiceByNamespaceAndProfile_Handler,
		},
		{
			MethodName: "GetAllService",
			Handler:    _KVService_GetAllService_Handler,
		},
		{
			MethodName: "SetKeyService",
			Handler:    _KVService_SetKeyService_Handler,
		},
		{
			MethodName: "DeleteKeyService",
			Handler:    _KVService_DeleteKeyService_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stoo.proto",
}
